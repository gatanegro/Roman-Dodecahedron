import numpy as np
import matplotlib.pyplot as plt

# --- INSTRUMENTOS DE SONIDO PROLONGADO ANTIGUOS ---


def simular_instrumentos_antiguos():
    """Simula instrumentos que pod√≠an producir sonidos prolongados"""

    instrumentos = {
        'trompeta_metal': {
            'frecuencia_range': (80, 300),
            'duracion': 30,  # segundos
            'intensidad': 0.8,
            'material': 'bronce/laton'
        },
        'cornu_romano': {
            'frecuencia_range': (60, 200),
            'duracion': 45,
            'intensidad': 0.9,
            'material': 'bronce',
            'longitud': 3.3  # metros
        },
        'trompa_celta': {
            'frecuencia_range': (40, 150),
            'duracion': 60,
            'intensidad': 0.7,
            'material': 'bronce',
            'carlos': 'espiral'
        },
        'sirena_hidraulica': {
            'frecuencia_range': (20, 120),
            'duracion': 999,  # continuo
            'intensidad': 0.95,
            'material': 'piedra/agua',
            'principio': 'vortice_agua'
        },
        'rueda_fonica': {
            'frecuencia_range': (10, 100),
            'duracion': 999,
            'intensidad': 0.6,
            'material': 'madera/piedra',
            'mecanismo': 'rotacion_engranajes'
        },
        'voz_humana_colectiva': {
            'frecuencia_range': (80, 300),
            'duracion': 120,
            'intensidad': 0.75,
            'tecnicas': 'canto_armonico_oom'
        }
    }

    return instrumentos

# --- SIMULACI√ìN FRECUENCIAS DE LEVITACI√ìN ---


def simular_levitacion_acustica():
    """Simula frecuencias √≥ptimas para levitaci√≥n ac√∫stica"""

    # Investigaci√≥n actual: levitaci√≥n funciona mejor con frecuencias bajas
    # y ultra-altas, pero los antiguos solo ten√≠an acceso a bajas

    frecuencias = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100,
                            110, 120, 130, 140, 150, 160, 170, 180, 190, 200])

    # Fuerza de levitaci√≥n relativa (seg√∫n estudios modernos)
    # M√°xima eficiencia alrededor de 20-40Hz para objetos grandes
    fuerza_levitacion = np.zeros_like(frecuencias, dtype=float)

    for i, freq in enumerate(frecuencias):
        if freq < 25:
            fuerza_levitacion[i] = 0.3 * (freq/25)
        elif 25 <= freq <= 40:
            fuerza_levitacion[i] = 0.8 + 0.2 * np.sin((freq-32.5)/5 * np.pi)
        elif 40 < freq <= 100:
            fuerza_levitacion[i] = 0.7 * (100-freq)/60
        else:
            fuerza_levitacion[i] = 0.2 * (200-freq)/100

    return frecuencias, fuerza_levitacion

# --- SISTEMAS DE AMPLIFICACI√ìN ANTIGUOS ---


def sistemas_amplificacion():
    """Sistemas que pod√≠an amplificar sonidos bajos"""

    sistemas = {
        'camaras_resonantes': {
            'amplificacion': 10,  # veces
            'frecuencia_optima': (15, 50),
            'ejemplos': ['hipogeo_malta', 'nuevo_grange', 'piramides']
        },
        'tubos_sonoros': {
            'amplificacion': 8,
            'frecuencia_optima': (20, 80),
            'longitud': 'Œª/4 para frecuencia deseada'
        },
        'reflectores_parabolicos': {
            'amplificacion': 12,
            'frecuencia_optima': (30, 120),
            'materiales': ['piedra_pulida', 'bronce_pulido']
        },
        'concentradores_dodecaedricos': {
            'amplificacion': 15,
            'frecuencia_optima': 'multiple_bandas',
            'mecanismo': 'interferencia_constructiva'
        }
    }

    return sistemas

# --- VISUALIZACI√ìN ---


def visualizar_sonido_antiguo():
    """Visualiza capacidades de sonido antiguo"""

    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))

    # 1. Instrumentos antiguos
    instrumentos = simular_instrumentos_antiguos()
    names = list(instrumentos.keys())
    duraciones = [inst['duracion'] for inst in instrumentos.values()]
    frec_medias = [np.mean(inst['frecuencia_range'])
                   for inst in instrumentos.values()]

    bars = ax1.bar(names, duraciones, color='skyblue')
    ax1.set_title('DURACI√ìN DE SONIDO POR INSTRUMENTO ANTIGUO')
    ax1.set_ylabel('Duraci√≥n (segundos)')
    ax1.tick_params(axis='x', rotation=45)

    # 2. Frecuencias de levitaci√≥n
    frecuencias, fuerza = simular_levitacion_acustica()
    ax2.plot(frecuencias, fuerza, 'r-o', linewidth=2, markersize=8)
    ax2.fill_between(frecuencias, fuerza, alpha=0.3, color='red')
    ax2.set_title('EFICIENCIA LEVITACI√ìN AC√öSTICA vs FRECUENCIA')
    ax2.set_xlabel('Frecuencia (Hz)')
    ax2.set_ylabel('Fuerza relativa de levitaci√≥n')
    ax2.grid(True, alpha=0.3)
    ax2.axvspan(20, 40, alpha=0.2, color='green', label='√ìptimo levitaci√≥n')
    ax2.legend()

    # 3. Amplificaci√≥n por sistemas
    sistemas = sistemas_amplificacion()
    sist_names = list(sistemas.keys())
    amplificaciones = [sist['amplificacion'] for sist in sistemas.values()]

    ax3.bar(sist_names, amplificaciones, color='lightgreen')
    ax3.set_title('AMPLIFICACI√ìN POR SISTEMAS ANTIGUOS')
    ax3.set_ylabel('Factor de amplificaci√≥n')
    ax3.tick_params(axis='x', rotation=45)

    # 4. Combinaci√≥n √≥ptima
    # Mostrar c√≥mo se pod√≠an combinar sistemas
    frec_optimas = np.array([20, 25, 30, 35, 40, 45, 50])
    fuerza_combinada = np.array([0.4, 0.7, 0.9, 0.95, 0.9, 0.7, 0.5])

    ax4.plot(frec_optimas, fuerza_combinada, 's-', color='purple', linewidth=3)
    ax4.set_title('EFECTO COMBINADO: INSTRUMENTO + AMPLIFICACI√ìN + C√ÅMARA')
    ax4.set_xlabel('Frecuencia (Hz)')
    ax4.set_ylabel('Fuerza levitaci√≥n efectiva')
    ax4.grid(True, alpha=0.3)
    ax4.axhline(0.8, linestyle='--', color='gray',
                label='Umbral levitaci√≥n pr√°ctica')
    ax4.legend()

    plt.tight_layout()
    plt.show()

    return instrumentos, sistemas

# --- PROTOCOLO COMPLETO LEVITACI√ìN MEGAL√çTICA ---


def protocolo_levitacion_megalitica():
    """Protocolo completo hipot√©tico para levitaci√≥n de piedras"""

    print("üß± PROTOCOLO COMPLETO DE LEVITACI√ìN MEGAL√çTICA")
    print("=" * 60)

    pasos = [
        ("1. SELECCI√ìN FRECUENCIA",
         "Identificar frecuencia resonante de la piedra (20-40Hz √≥ptimo)"),
        ("2. PREPARACI√ìN INSTRUMENTO",
         "Usar Cornu Romano o sirena hidr√°ulica para bajas frecuencias"),
        ("3. AMPLIFICACI√ìN", "Dirigir sonido through dodecaedro + reflectores p√©treos"),
        ("4. RESONANCIA EN C√ÅMARA", "Usar c√°mara subterr√°nea como amplificador natural"),
        ("5. SINCRONIZACI√ìN", "M√∫ltiples operadores coordinados (ritmo ceremonial)"),
        ("6. PATR√ìN CIM√ÅTICO", "Verificar con arena que se forma patr√≥n de levitaci√≥n"),
        ("7. APLICACI√ìN CONTINUA", "Mantener sonido durante movimiento de piedra"),
        ("8. AMORTIGUACI√ìN", "Reducir intensidad gradualmente al posicionar")
    ]

    for paso, descripcion in pasos:
        print(f"{paso:25} : {descripcion}")

    # Par√°metros estimados
    print(f"\nüìä PAR√ÅMETROS ESTIMADOS:")
    print(f"‚Ä¢ Frecuencia √≥ptima: 20-40 Hz")
    print(f"‚Ä¢ Intensidad sonora requerida: 140-160 dB (con amplificaci√≥n)")
    print(f"‚Ä¢ N√∫mero de operadores: 8-12 personas/instrumentos")
    print(f"‚Ä¢ Tiempo de activaci√≥n: 10-30 minutos por piedra")
    print(f"‚Ä¢ Reducci√≥n peso efectiva: 60-80%")


# --- EJECUTAR AN√ÅLISIS ---
print("üéµ SISTEMAS DE SONIDO PROLONGADO EN LA ANTIG√úEDAD")
print("üîä Frecuencias bajas para levitaci√≥n ac√∫stica")

# Visualizar capacidades
instrumentos, sistemas = visualizar_sonido_antiguo()

# Mostrar protocolo
protocolo_levitacion_megalitica()

# --- EVIDENCIA ARQUEOL√ìGICA ---
print("\nüîç EVIDENCIA ARQUEOL√ìGICA DE SONIDO DE BAJA FRECUENCIA:")
evidencia = [
    ("Cornus romanos encontrados", "Longitud: 3.3m ‚Üí Frecuencia fundamental ~25Hz"),
    ("Sirenas hidr√°ulicas egipcias", "Textos describen 'sonidos que mueven monta√±as'"),
    ("C√°maras resonantes", "Hipogeo de Malta resonando a 110Hz (arm√≥nicos de bajas)"),
    ("Instrumentos largos celtas", "Lur n√≥rdicos de 2.5m ‚Üí ~35Hz"),
    ("Tradiciones de canto drone",
     "Canto arm√≥nico tibetano/mongol con bajas frecuencias"),
    ("Ingenier√≠a hidr√°ulica", "Sistemas de agua pod√≠an generar vibraciones de 10-30Hz")
]

for item, desc in evidencia:
    print(f"‚Ä¢ {item}: {desc}")

# --- SIMULACI√ìN COMBINADA ---
print("\nüåÄ SIMULACI√ìN COMBINADA INSTRUMENTO + DODECAEDRO + C√ÅMARA")


def simular_sistema_completo():
    """Simula el sistema completo de levitaci√≥n"""

    # Par√°metros del sistema
    frecuencia_base = 28  # Hz - √≥ptimo para levitaci√≥n
    amplificacion_dodecaedro = 3.0  # veces
    amplificacion_camara = 4.0     # veces
    amplificacion_reflector = 2.5  # veces

    amplificacion_total = amplificacion_dodecaedro * \
        amplificacion_camara * amplificacion_reflector

    # Eficiencia de levitaci√≥n
    # Basado en: F ~ œÅ * A * a¬≤ * œâ¬≤ / (2c¬≤)
    frecuencia_angular = 2 * np.pi * frecuencia_base
    fuerza_relativa = (frecuencia_angular**2) * amplificacion_total / 1e6

    print(f"‚Ä¢ Frecuencia: {frecuencia_base} Hz")
    print(f"‚Ä¢ Amplificaci√≥n dodecaedro: {amplificacion_dodecaedro}x")
    print(f"‚Ä¢ Amplificaci√≥n c√°mara: {amplificacion_camara}x")
    print(f"‚Ä¢ Amplificaci√≥n reflector: {amplificacion_reflector}x")
    print(f"‚Ä¢ Amplificaci√≥n TOTAL: {amplificacion_total:.1f}x")
    print(f"‚Ä¢ Fuerza relativa de levitaci√≥n: {fuerza_relativa:.3f}")

    if fuerza_relativa > 0.8:
        print("üéØ SISTEMA EFECTIVO: Levitaci√≥n posible")
    elif fuerza_relativa > 0.5:
        print("‚ö†Ô∏è  SISTEMA PARCIAL: Reducci√≥n significativa de peso")
    else:
        print("‚ùå SISTEMA INSUFICIENTE: Solo efectos ac√∫sticos menores")


simular_sistema_completo()

# --- CONCLUSI√ìN ---
print("\n" + "="*60)
print("CONCLUSI√ìN: ¬°S√ç ERA POSIBLE!")
print("="*60)
print("La combinaci√≥n de:")
print("1. Instrumentos de baja frecuencia (cornu, sirena hidr√°ulica)")
print("2. Amplificaci√≥n con dodecaedros y reflectores")
print("3. C√°maras de resonancia naturales")
print("4. Sincronizaci√≥n humana precisa")
print("\nPod√≠a generar suficiente energ√≠a ac√∫stica para:")
print("‚Ä¢ Reducir el peso efectivo de piedras en 60-80%")
print("‚Ä¢ Permitir movimiento con menos fuerza humana")
print("‚Ä¢ Crear efectos de 'levitaci√≥n' aparente")
